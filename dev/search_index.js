var documenterSearchIndex = {"docs":
[{"location":"#","page":"Yama 山","title":"Yama 山","text":"CurrentModule = Yama","category":"page"},{"location":"#Yama-山-1","page":"Yama 山","title":"Yama 山","text":"","category":"section"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"GitHub","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"Visualize loss landscape in 3D.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/pxl-th/Yama.jl/master/res/mnist.png\" width=250>\n  <img src=\"https://raw.githubusercontent.com/pxl-th/Yama.jl/master/res/mnist-log.png\" width=250>\n  <img src=\"https://raw.githubusercontent.com/pxl-th/Yama.jl/master/res/mnist-two-checkpoints.png\" width=250>\n</p>","category":"page"},{"location":"#Loss-surface-configurations-1","page":"Yama 山","title":"Loss surface configurations","text":"","category":"section"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"Create surface in random directions around current model parameters.\nCreate surface between model checkpoints both in x- and y-directions. In this case you have to provide x_directions_file and\\or y_directions_file containing those directions. Both of them should match in shape with model's weights.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"note: Note\nIn case when creating surface between model checkpoints, both x- and y- directions files in SurfaceArgs should contain directions under directions_weights key.Saving weights like this in code would look like BSON.@save file direction_weights.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"Visit examples for complete examples, but below is a short guide.","category":"page"},{"location":"#MNIST-Example-1","page":"Yama 山","title":"MNIST Example","text":"","category":"section"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"Import necessary stuff.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"using Flux.Data.MNIST: images, labels\nusing Yama: create_surface, SurfaceArgs\nusing Plots\n\npyplot()\nPlots.PyPlotBackend()","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"Define parameters used when creating surface.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"args = SurfaceArgs(\n    model_file=\"./mpl-mnist.bson\",\n    save_file=\"./surface.bson\",\n)","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"Create and load model if specified model_file in SurfaceArgs.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"model = Chain(Dense(28 * 28, 10))\nif !isa(args.model_file, Nothing)\n    @load args.model_file model_parameters\n    loadparams!(model, model_parameters)\nend","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"Define function that computes loss on mini-batch. Note that if you set use_gpu in SurfaceArgs to true, then it is up to you to transfer mini-batch to gpu as done in this example.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"function make_minibatch(data, labels)\n    batch_size = length(data)\n    batch = Array{Float32}(undef, size(data[1])..., 1, batch_size)\n    @inbounds for i in 1:batch_size\n        batch[:, :, :, i] = Float32.(data[i])\n    end\n\n    batch, Float32.(onehotbatch(labels, 0:9))\nend\n\nfunction evaluation_step(model, batch, args::SurfaceArgs)\n    x, y = make_minibatch(batch...)\n    x = flatten(x)\n    if args.use_gpu\n        x = x |> gpu\n        y = y |> gpu\n    end\n    logitcrossentropy(model(x), y)\nend","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"Compute, save and plot loss surface.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"coordinates, loss_surface = create_surface(\n    model, loader, evaluation_step, args,\n)\nif !isa(args.save_file, Nothing)\n    @save args.save_file coordinates loss_surface\nend\n\nsurface(coordinates..., loss_surface, linewidth=0, antialiased=false)\ngui()","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"You can later load already computed surface, without the need to re-compute from scratch.","category":"page"},{"location":"#","page":"Yama 山","title":"Yama 山","text":"@load args.save_file coordinates loss_surface","category":"page"},{"location":"docs/#User-API-1","page":"User API","title":"User API","text":"","category":"section"},{"location":"docs/#","page":"User API","title":"User API","text":"Modules = [Yama]\nPrivate = false","category":"page"},{"location":"docs/#Yama.SurfaceArgs","page":"User API","title":"Yama.SurfaceArgs","text":"Arguments for configuring loss surface computation.\n\nParameters\n\nxmin::Float32, xmax::Float32, xnum::Int32: define span of the surface\n\nand amount of point in the x direction.\n\nymin::Float32, ymax::Float32, ynum::Int32: define span of the surface\n\nand amount of point in the y direction.\n\nuse_gpu::Bool: Whether to use gpu. If true then it is up to you to\n\ntransfer mini-batch in evaluation_step function to the gpu.\n\nx_directions_file::Union{Nothing, String}: If provided, directions\n\nfor x axis will be loaded from it. Otherwise, random initialized. Should match in shape with model's weights.\n\ny_directions_file::Union{Nothing, String}: If provided, directions\n\nfor y axis will be loaded from it. Otherwise, random initialized. Should match in shape with model's weights.\n\nnote: Note\nIf use_gpu = true then it is up to you to transfer mini-batch in evaluation_step function to the gpu.\n\nnote: Note\nBoth x- and y- directions files in should contain directions under checkpoint_weights key.Saving weights like this in code would look like BSON.@save file checkpoint_weights.\n\n\n\n\n\n","category":"type"},{"location":"docs/#Yama.create_surface-Tuple{Any,Flux.Data.DataLoader,Function,SurfaceArgs}","page":"User API","title":"Yama.create_surface","text":"function create_surface(\n    model, dataloader::DataLoader, evaluation_step::Function, args::SurfaceArgs,\n)\n\nCreate loss surface.\n\nParameters\n\nmodel: Model to use in loss function.\ndataloader::DataLoader: Dataset on which to evaluate loss function.\nevaluation_step:   Custom-defined function which given model, mini-batch and args,   computes loss on that mini-batch.\nargs::SurfaceArgs: Parameters used when computing surface.\n\nnote: Note\nIf you specified use_gpu in args, then it is up to you, to transfer mini-batch in evaluation_step function to gpu.\n\n\n\n\n\n","category":"method"}]
}
